#include <iostream>
#include <stdio.h>
#include "opencv2/core.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"

using namespace std;
using namespace cv;

int main()
{
    // Load image
    string un = "C:/eee/OpenCV Task/Images/Star(Yellow Line).bmp";
    string circle = "C:/eee/OpenCV Task/Images/Circle(Red Line).bmp";
    string star = "C:/eee/OpenCV Task/Images/Star(Green Line).bmp";
    string triangle = "C:/eee/OpenCV Task/Images/Triangle(Blue Line).bmp";
    Mat bgrImg1 = imread(un);
    if (bgrImg1.empty())
    {
        cout << "Could not open or find the image" << endl;
        return -1;
    }
    Mat bgrImg2 = imread(circle);
    if (bgrImg2.empty())
    {
        cout << "Could not open or find the image" << endl;
        return -1;
    }
    Mat bgrImg3 = imread(star);
    if (bgrImg3.empty())
    {
        cout << "Could not open or find the image" << endl;
        return -1;
    }
    Mat bgrImg4 = imread(triangle);
    if (bgrImg4.empty())
    {
        cout << "Could not open or find the image" << endl;
        return -1;
    }
    // Convert BGR image to HSV


    // Process image with trackbar values
    while (true)
    {
           Mat hsvImg1;
           cvtColor(bgrImg1, hsvImg1, COLOR_BGR2HSV);
           Mat hsvImg2;
           cvtColor(bgrImg2, hsvImg2, COLOR_BGR2HSV);
           Mat hsvImg3;
           cvtColor(bgrImg3, hsvImg3, COLOR_BGR2HSV);
           Mat hsvImg4;
           cvtColor(bgrImg4, hsvImg4, COLOR_BGR2HSV);
        // Get current trackbar values
        Scalar lower(145, 50, 50);
        Scalar upper(175, 255, 255);

        // Apply color thresholding to HSV image
        Mat mask1;
        inRange(hsvImg1, lower, upper, mask1);
        Mat mask2;
        inRange(hsvImg2, lower, upper, mask2);
        Mat mask3;
        inRange(hsvImg3, lower, upper, mask3);
        Mat mask4;
        inRange(hsvImg4, lower, upper, mask4);

        imshow("HSV", un);
        imshow("HSV1", mask2);
        imshow("HSV2", mask3);
        imshow("HSV3", mask4);


        if (waitKey(1) == 27) break; // Exit if 'Esc' key is pressed
    }

    // Convert final mask to BGR and show

    waitKey(0);

    return 0;
}
